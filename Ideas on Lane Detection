Example 1:
https://www.youtube.com/watch?v=a6pDdS6sY2E

Example 2 (Long):
https://www.youtube.com/watch?v=VyLihutdsPk

Example 2:
https://www.youtube.com/watch?v=0se6_UPNWVc

Fun to watch:
https://www.youtube.com/watch?v=IzvlqCEYjg4
https://www.youtube.com/watch?v=X8QN-qY7uIo
https://www.youtube.com/watch?v=gWK9x5Xs_TI
https://www.youtube.com/watch?v=G2VaJvNNp4k
https://www.youtube.com/watch?v=JmxDIuCIIcg
https://www.youtube.com/watch?v=ipXQFcAeovk

Recommendation: Record a video from the onboard camera of the car going through either the simulatin or a real track. WIll use this video to try out the codes as in the video.


What color are the lanes Vs what color is the background?
Camera Lens distortion? Useful to warp the image. OpenCV has camera calibration and Undistort functions.
Perspective transformation. OpenCV can transform the lanes perspective.
Using Color spaces to detet lanes or using edge detections.
Threshold both the color channels and the edge frames. Find the Hot pixels.
Histogram is helpful for curve fitting. Guessing where the lanes start on the binarized image.
Create boxes that follow along the lines Then use a Polinomial fit to find the curvature of thhe lane.



HoughLanesP code from OpenCV seems to be an useful function to detect lines given some parameters.

Once the lanes are found, it is necesary to determine by geometry some directional vectors. 

We can either do calculations ahead in time and predict curves or go through them on the run by running a code to keep the image centered.


1) Get the sample onboard camera video or simulation video.
2) Crop in the area of interest
3) apply flters to reduce noise if necessary.
4) Create functions to detct lanes using OpenCV library. (There are functions that already do this like: HoughLanesP, Edge Detection Filters, )
5) Once the lanes are found, determine the geometry of them. Draw directional vectors.
6) By doing math, determine the focus point of the curve. Convert the camera perspective of the curve to an estmate geomety of the real curve.
7) Do geometry conversion and turn each wheel to match the curve focus in an Ackerman Steering System.
8) Pray that it works.


- Write functions for:Â´
    following a lane. Keeping the lines convergent at equivalent degrees of inclination and centered with the vertical axis.
    detecting a curve. Either estimate it in advance or run through it live.
    entering into a curve. Small deviation from following the lanes to match the curve on time.
    matching the curvature of the curve. The focus of the Ackerman Steering has to match the focus of the curve.
    finding the end of the curve. 
    exiting the curve. Small deviation from following the curve to match the straight lane again. 

